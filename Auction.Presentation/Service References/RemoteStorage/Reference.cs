//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Auction.Presentation.RemoteStorage {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Storage", Namespace="http://schemas.datacontract.org/2004/07/UserService")]
    [System.SerializableAttribute()]
    public partial class Storage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FilePathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModelField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FilePath {
            get {
                return this.FilePathField;
            }
            set {
                if ((object.ReferenceEquals(this.FilePathField, value) != true)) {
                    this.FilePathField = value;
                    this.RaisePropertyChanged("FilePath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Model {
            get {
                return this.ModelField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelField, value) != true)) {
                    this.ModelField = value;
                    this.RaisePropertyChanged("Model");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="JsonModel", Namespace="http://schemas.datacontract.org/2004/07/UserService.Model")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Auction.Presentation.RemoteStorage.User))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Auction.Presentation.RemoteStorage.Permission))]
    public partial class JsonModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime UpdateOnField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime UpdateOn {
            get {
                return this.UpdateOnField;
            }
            set {
                if ((this.UpdateOnField.Equals(value) != true)) {
                    this.UpdateOnField = value;
                    this.RaisePropertyChanged("UpdateOn");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/UserService.Model")]
    [System.SerializableAttribute()]
    public partial class User : Auction.Presentation.RemoteStorage.JsonModel {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LocaleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PictureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime RegistrationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TimezoneIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Locale {
            get {
                return this.LocaleField;
            }
            set {
                if ((object.ReferenceEquals(this.LocaleField, value) != true)) {
                    this.LocaleField = value;
                    this.RaisePropertyChanged("Locale");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Login {
            get {
                return this.LoginField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginField, value) != true)) {
                    this.LoginField = value;
                    this.RaisePropertyChanged("Login");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Picture {
            get {
                return this.PictureField;
            }
            set {
                if ((object.ReferenceEquals(this.PictureField, value) != true)) {
                    this.PictureField = value;
                    this.RaisePropertyChanged("Picture");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime RegistrationDate {
            get {
                return this.RegistrationDateField;
            }
            set {
                if ((this.RegistrationDateField.Equals(value) != true)) {
                    this.RegistrationDateField = value;
                    this.RaisePropertyChanged("RegistrationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TimezoneId {
            get {
                return this.TimezoneIdField;
            }
            set {
                if ((object.ReferenceEquals(this.TimezoneIdField, value) != true)) {
                    this.TimezoneIdField = value;
                    this.RaisePropertyChanged("TimezoneId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Permission", Namespace="http://schemas.datacontract.org/2004/07/UserService.Model")]
    [System.SerializableAttribute()]
    public partial class Permission : Auction.Presentation.RemoteStorage.JsonModel {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AuctionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid[] CategoriesIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RoleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid UserIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AuctionId {
            get {
                return this.AuctionIdField;
            }
            set {
                if ((object.ReferenceEquals(this.AuctionIdField, value) != true)) {
                    this.AuctionIdField = value;
                    this.RaisePropertyChanged("AuctionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid[] CategoriesId {
            get {
                return this.CategoriesIdField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoriesIdField, value) != true)) {
                    this.CategoriesIdField = value;
                    this.RaisePropertyChanged("CategoriesId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Role {
            get {
                return this.RoleField;
            }
            set {
                if ((this.RoleField.Equals(value) != true)) {
                    this.RoleField = value;
                    this.RaisePropertyChanged("Role");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RemoteStorage.IJsonService")]
    public interface IJsonService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJsonService/CreateJson", ReplyAction="http://tempuri.org/IJsonService/CreateJsonResponse")]
        Auction.Presentation.RemoteStorage.Storage CreateJson(string folder, string model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJsonService/CreateJson", ReplyAction="http://tempuri.org/IJsonService/CreateJsonResponse")]
        System.Threading.Tasks.Task<Auction.Presentation.RemoteStorage.Storage> CreateJsonAsync(string folder, string model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJsonService/GetById", ReplyAction="http://tempuri.org/IJsonService/GetByIdResponse")]
        Auction.Presentation.RemoteStorage.JsonModel GetById(Auction.Presentation.RemoteStorage.Storage storage, System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJsonService/GetById", ReplyAction="http://tempuri.org/IJsonService/GetByIdResponse")]
        System.Threading.Tasks.Task<Auction.Presentation.RemoteStorage.JsonModel> GetByIdAsync(Auction.Presentation.RemoteStorage.Storage storage, System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJsonService/Query", ReplyAction="http://tempuri.org/IJsonService/QueryResponse")]
        Auction.Presentation.RemoteStorage.JsonModel[] Query(Auction.Presentation.RemoteStorage.Storage storage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJsonService/Query", ReplyAction="http://tempuri.org/IJsonService/QueryResponse")]
        System.Threading.Tasks.Task<Auction.Presentation.RemoteStorage.JsonModel[]> QueryAsync(Auction.Presentation.RemoteStorage.Storage storage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJsonService/Add", ReplyAction="http://tempuri.org/IJsonService/AddResponse")]
        void Add(Auction.Presentation.RemoteStorage.Storage storage, Auction.Presentation.RemoteStorage.JsonModel item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJsonService/Add", ReplyAction="http://tempuri.org/IJsonService/AddResponse")]
        System.Threading.Tasks.Task AddAsync(Auction.Presentation.RemoteStorage.Storage storage, Auction.Presentation.RemoteStorage.JsonModel item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJsonService/Update", ReplyAction="http://tempuri.org/IJsonService/UpdateResponse")]
        void Update(Auction.Presentation.RemoteStorage.Storage storage, Auction.Presentation.RemoteStorage.JsonModel item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJsonService/Update", ReplyAction="http://tempuri.org/IJsonService/UpdateResponse")]
        System.Threading.Tasks.Task UpdateAsync(Auction.Presentation.RemoteStorage.Storage storage, Auction.Presentation.RemoteStorage.JsonModel item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJsonService/Delete", ReplyAction="http://tempuri.org/IJsonService/DeleteResponse")]
        void Delete(Auction.Presentation.RemoteStorage.Storage storage, System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJsonService/Delete", ReplyAction="http://tempuri.org/IJsonService/DeleteResponse")]
        System.Threading.Tasks.Task DeleteAsync(Auction.Presentation.RemoteStorage.Storage storage, System.Guid id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IJsonServiceChannel : Auction.Presentation.RemoteStorage.IJsonService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class JsonServiceClient : System.ServiceModel.ClientBase<Auction.Presentation.RemoteStorage.IJsonService>, Auction.Presentation.RemoteStorage.IJsonService {
        
        public JsonServiceClient() {
        }
        
        public JsonServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public JsonServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public JsonServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public JsonServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Auction.Presentation.RemoteStorage.Storage CreateJson(string folder, string model) {
            return base.Channel.CreateJson(folder, model);
        }
        
        public System.Threading.Tasks.Task<Auction.Presentation.RemoteStorage.Storage> CreateJsonAsync(string folder, string model) {
            return base.Channel.CreateJsonAsync(folder, model);
        }
        
        public Auction.Presentation.RemoteStorage.JsonModel GetById(Auction.Presentation.RemoteStorage.Storage storage, System.Guid id) {
            return base.Channel.GetById(storage, id);
        }
        
        public System.Threading.Tasks.Task<Auction.Presentation.RemoteStorage.JsonModel> GetByIdAsync(Auction.Presentation.RemoteStorage.Storage storage, System.Guid id) {
            return base.Channel.GetByIdAsync(storage, id);
        }
        
        public Auction.Presentation.RemoteStorage.JsonModel[] Query(Auction.Presentation.RemoteStorage.Storage storage) {
            return base.Channel.Query(storage);
        }
        
        public System.Threading.Tasks.Task<Auction.Presentation.RemoteStorage.JsonModel[]> QueryAsync(Auction.Presentation.RemoteStorage.Storage storage) {
            return base.Channel.QueryAsync(storage);
        }
        
        public void Add(Auction.Presentation.RemoteStorage.Storage storage, Auction.Presentation.RemoteStorage.JsonModel item) {
            base.Channel.Add(storage, item);
        }
        
        public System.Threading.Tasks.Task AddAsync(Auction.Presentation.RemoteStorage.Storage storage, Auction.Presentation.RemoteStorage.JsonModel item) {
            return base.Channel.AddAsync(storage, item);
        }
        
        public void Update(Auction.Presentation.RemoteStorage.Storage storage, Auction.Presentation.RemoteStorage.JsonModel item) {
            base.Channel.Update(storage, item);
        }
        
        public System.Threading.Tasks.Task UpdateAsync(Auction.Presentation.RemoteStorage.Storage storage, Auction.Presentation.RemoteStorage.JsonModel item) {
            return base.Channel.UpdateAsync(storage, item);
        }
        
        public void Delete(Auction.Presentation.RemoteStorage.Storage storage, System.Guid id) {
            base.Channel.Delete(storage, id);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(Auction.Presentation.RemoteStorage.Storage storage, System.Guid id) {
            return base.Channel.DeleteAsync(storage, id);
        }
    }
}
